{
  "chunk-668f16c97eb733c2aa7eab280e6a8641": {
    "tokens": 1200,
    "content": "OPEN SOURCE SECURITY\r\nAND RISK ANALYSIS REPORT\r\n\f    TABLE OF CONTENTS\r\n    Introduction............................................................................................................................................................................. 3\r\n       About the CyRC and the 2021 Open Source Security and Risk Analysis report....................................................................................................................... 4\r\n\r\n    Overview.................................................................................................................................................................................. 5\r\n       Open source in 2020..................................................................................................................................................................................................................... 6\r\n          Terminology used in this report.................................................................................................................................................................................................................7\r\n          Industry sectors and open source.............................................................................................................................................................................................................8\r\n\r\n    Vulnerabilities and Security.................................................................................................................................................... 9\r\n       Open source vulnerabilities and security.................................................................................................................................................................................. 10\r\n          Parallels between the ‘State of Mobile Application Security’ and OSSRA reports.........................................................................................................................11\r\n          The top 10 vulnerabilities..........................................................................................................................................................................................................................13\r\n\r\n    Licensing............................................................................................................................................................................... 15\r\n       Open source licensing................................................................................................................................................................................................................ 16\r\n          Understanding license risk........................................................................................................................................................................................................................17\r\n\r\n    Sustainability......................................................................................................................................................................... 19\r\n       Open source sustainability......................................................................................................................................................................................................... 20\r\n          The price of popularity...............................................................................................................................................................................................................................21\r\n\r\n    Conclusion............................................................................................................................................................................. 23\r\n       The Peter Parker principle.......................................................................................................................................................................................................... 24\r\n           Mistakes versus malice.............................................................................................................................................................................................................................25\r\n           Coverity Scan data......................................................................................................................................................................................................................................25\r\n           NGINX Open Source: A Coverity Scan Case Study.............................................................................................................................................................. 26\r\n           Create demand for a Bill of Materials.....................................................................................................................................................................................................27\r\n           Coda..............................................................................................................................................................................................................................................................27\r\n       Further reading............................................................................................................................................................................................................................ 28\r\n       References.................................................................................................................................................................................................................................. 28\r\n\r\n\r\n\r\n\r\n2     2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\fINTRODUCTION\r\n\f               ABOUT THE CYRC AND THE 2021                             Audit Services. Our SCA solutions help organizations     Duck Binary Analyses and Coverity Scan®. The\r\nINTRODUCTION\r\n\r\n\r\n\r\n                                                                       identify and track open source code and automate         2020 audit data analysis used in this report was\r\n               OPEN SOURCE SECURITY AND RISK\r\n                                                                       the enforcement of open source policies through          conducted by the CyRC’s Belfast and Boston teams.\r\n               ANALYSIS REPORT                                         integration with currently used DevOps tools and         In addition to validating data used in the OSSRA, the\r\n               The Synopsys Cybersecurity Research Center’s            processes. Our Audit Services team conducts              Belfast team’s work forms the basis of Black Duck\r\n               (CyRC) mission is to publish security advisories and    audits on thousands of codebases for customers           Security Advisories (BDSAs), which offer enhanced\r\n               research to help organizations better develop and       each year, both to support merger and acquisition        vulnerability information that the team publishes as a\r\n               consume secure, high-quality software. Our most         (M&A) transactions and to provide customers with         service to commercial Black Duck customers.\r\n               recent security and software quality reports include    a comprehensive, up-to-date Bill of Materials of the\r\n                                                                                                                                This year, the CyRC teams examined anonymized\r\n               “Peril in a Pandemic: The State of Mobile Application   open source, third-party code, web services, and APIs\r\n                                                                                                                                audit findings from over 1,500 commercial\r\n               Security,” an analysis of the most popular Android      used in their applications.\r\n                                                                                                                                codebases in 17 industries. You need look no\r\n               apps used during the COVID-19 pandemic; and             The audit data is cross-referenced with the Black        further than the pages of this report to see that\r\n               “DevSecOps Practices and Open Source Management         Duck KnowledgeBase™ to identify potential license        open source libraries are the foundation for literally\r\n               in 2020,” a survey of software professionals on open    compliance and security risks as well as other factors   every application in every industry. But paralleling\r\n               source management and DevSecOps.                        that may affect the overall codebase. Curated by the     the popularity of open source is a growth in risk—\r\n               This research, the CyRC’s annual “Open Source           CyRC, the KnowledgeBase houses data on millions          specifically around open source licensing, security,\r\n               Security and Risk Analysis” (OSSRA) report, provides    of open source libraries from over 24,000 forges and     code quality, and maintenance.\r\n               an in-depth snapshot of the current state of open       repositories.\r\n                                                                                                                                This sixth edition of our report, the 2021 OSSRA,\r\n               source security, compliance, licensing, and code        Audits are the primary source of data for the 2021       includes recommendations to help open source\r\n               quality risk in commercial software.                    OSSRA report. Additional data used in the report         developers and consumers better understand the\r\n               For over 17 years, security, development, and legal     (specifically in the “Parallels between the ‘State of    software ecosystem they are part of, as well as\r\n               teams around the globe have relied on Black Duck®       Mobile Application Security’ and OSSRA reports”          the risks that come with unmanaged open source\r\n               software composition analysis (SCA) solutions and       section and the conclusion) comes from Black             development and use.\r\n\r\n\r\n\r\n\r\n    4            2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\fOVERVIEW\r\n\f           Open source in 2020\r\nOVERVIEW\r\n\r\n\r\n\r\n\r\n                                                                                                              OF CODEBASES\r\n           CODEBASES\r\n\r\n\r\n\r\n                                                                  CODEB\r\n                                                                                                              HAD AT LEAST ONE\r\n\r\n\r\n\r\n\r\n                                                                                                          E\r\n                                                                                                      URC\r\n                                                                                                              VULNERABILITY\r\n            AUDITED IN 2020                                                    PERCENT OF\r\n                                                                                                              WITH AN AVERAGE OF\r\n\r\n\r\n\r\n\r\n                                                                    AS\r\n\r\n\r\n\r\n\r\n                                                                                                     SO",
    "chunk_order_index": 0,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-61f8225e274d7896c0c78ded63346b2c": {
    "tokens": 1200,
    "content": "RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\fOVERVIEW\r\n\f           Open source in 2020\r\nOVERVIEW\r\n\r\n\r\n\r\n\r\n                                                                                                              OF CODEBASES\r\n           CODEBASES\r\n\r\n\r\n\r\n                                                                  CODEB\r\n                                                                                                              HAD AT LEAST ONE\r\n\r\n\r\n\r\n\r\n                                                                                                          E\r\n                                                                                                      URC\r\n                                                                                                              VULNERABILITY\r\n            AUDITED IN 2020                                                    PERCENT OF\r\n                                                                                                              WITH AN AVERAGE OF\r\n\r\n\r\n\r\n\r\n                                                                    AS\r\n\r\n\r\n\r\n\r\n                                                                                                     SO\r\n                                                                          S\r\n                                                                              CO                     EN\r\n\r\n\r\n\r\n\r\n                                                                      E\r\n                                                                                   NTA I N E D O P\r\n\r\n\r\n\r\n\r\n                                                                                                              PER CODEBASE\r\n\r\n\r\n                                                                                                                 THE AVERAGE\r\n                                                                   OF CODEBASES                                 VULNERABILITY\r\n                                                                                                                  FOUND WAS\r\n\r\n                                                                   HAD LICENSE\r\n           17 INDUSTRIES REPRESENTED                               CONFLICTS\r\n                                                                                                                 YEARS OLD\r\n                                                           OF ALL CODEBASES WERE\r\n                                                           COMPOSED OF OPEN SOURCE\r\n\r\n\r\n   6       2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\fOVERVIEW\r\n\r\n\r\n\r\n                    TERMINOLOGY USED IN THIS REPORT\r\n\r\n                Codebase                                          Open source license                                   Bill of Materials (BOM)\r\n                The code and associated libraries that make up    A set of terms and conditions stating end-user        A comprehensive inventory of the open source\r\n                an application or service.                        obligations when an open source library is            dependencies in a codebase, often generated\r\n                                                                  used in software, including how the library may       by a software composition analysis tool. A BOM\r\n                Binary analysis                                   be used and redistributed. Most open source           lists all the open source, associated licenses,\r\n                A type of static analysis that examines the       licenses fall into one of two categories:             versions in use, download locations for\r\n                software of an application when access to the                                                           libraries/dependencies, and subdependencies\r\n                source code isn’t possible.                        • Permissive license                                 the dependencies link to.\r\n                                                                     A permissive license allows use with few\r\n                Black Duck Security Advisory (BDSA)                  restrictions. Generally, the main requirement      Software composition analysis (SCA)\r\n                A classification of open source vulnerabilities      of this type of license is to include              A type of application security tool used to\r\n                identified by the CyRC security research team.       attribution of the original code to the original   automate the process of open source software\r\n                BDSAs provide Synopsys customers with                developers.                                        management. SCA tools identify the open\r\n                early and/or supplemental notification of open                                                          source used in a codebase, provide risk\r\n                source vulnerabilities and upgrade/patch           • Copyleft license                                   management and mitigation recommendations,\r\n                guidance.                                            This type of license generally includes a          and perform license compliance verification.\r\n                                                                     reciprocity obligation stating that modified\r\n                Software library                                     and extended versions are released under           Static analysis\r\n                Prewritten code that developers can add to           the same terms and conditions as the               Also referred to as static application security\r\n                their software. A software library might be          original code. Commercial entities are wary        testing (SAST), automated static analysis is\r\n                a utility, such as a calendar function, or a         of including open source with copyleft             used to identify coding flaws within nonrunning\r\n                comprehensive software framework supporting          licenses in their software, as its use can call    (static) code. Static analysis is an important\r\n                an entire application.                               the overall codebase’s intellectual property       part of the software development life cycle\r\n                                                                     (IP) into question.                                (SDLC) and is commonly used by most software\r\n                Dependency                                                                                              development teams.\r\n                A software library becomes a dependency\r\n                when other software uses it—that is, when\r\n                software becomes dependent on that library.\r\n                Any given application or service may have\r\n                many dependencies, which themselves may be\r\n                dependent on other libraries.\r\n\r\n\r\n\r\n\r\n   7       2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f           INDUSTRY SECTORS AND OPEN SOURCE\r\nOVERVIEW\r\n\r\n\r\n\r\n\r\n           Percentage of Open Source in Codebases, by Industry\r\n\r\n\r\n\r\n\r\n                                     70%                               76%                              74%                              84%                           82%\r\n\r\n           Aerospace, Aviation, Auto,          Big Data, AI, BI,              Computer Hardware and               Cyber Security                       Ed Tech\r\n           Transportation, Logistics          Machine Learning                   Semiconductors\r\n\r\n\r\n\r\n\r\n                                     81%                               72%                              69%                              82%                           82%\r\n\r\n             Energy and Clean Tech         Enterprise Software/SaaS            Financial Services and         Healthcare, Health Tech,         Internet and Mobile Apps\r\n                                                                                      FinTech                      Life Sciences\r\n\r\n\r\n\r\n\r\n                                     79%                           89%                                  84%                              82%                           48%\r\n\r\n             Internet and Software           Internet of Things                    Manufacturing,                 Marketing Tech               Retail and E-Commerce\r\n                 Infrastructure                                                 Industrials, Robotics\r\n\r\n\r\n\r\n                                                                             Average of 91 Codebases Audited per Industry\r\n\r\n\r\n\r\n                                     57%                               76%\r\n\r\n            Telecommunications and          Virtual Reality, Gaming,\r\n                   Wireless                  Entertainment, Media\r\n\r\n\r\n\r\n\r\n   8       2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\fVULNERABILITIES\r\nAND SECURITY\r\n\f                               OPEN SOURCE VULNERABILITIES                            Vulnerabilities in Codebases         Percentage of codebases\r\nVULNERABILITIES AND SECURITY\r\n\r\n\r\n\r\n                                                                                                                           containing at least one vulnerability\r\n                               AND SECURITY\r\n\r\n\r\n\r\n\r\n                                                                                      100\r\n                                                                                                                           Percentage of high-risk\r\n                               A full 84% of the 1,500+ codebases Black Duck                                               vulnerabilities per codebases\r\n                               Audit Services audited in 2020 contained at least\r\n                               one public open source vulnerability—a 9% increase\r\n                                                                                                                                                            84",
    "chunk_order_index": 1,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-433d9e4bd38bd142105242ad69920fb6": {
    "tokens": 1200,
    "content": "VULNERABILITIES                            Vulnerabilities in Codebases         Percentage of codebases\r\nVULNERABILITIES AND SECURITY\r\n\r\n\r\n\r\n                                                                                                                           containing at least one vulnerability\r\n                               AND SECURITY\r\n\r\n\r\n\r\n\r\n                                                                                      100\r\n                                                                                                                           Percentage of high-risk\r\n                               A full 84% of the 1,500+ codebases Black Duck                                               vulnerabilities per codebases\r\n                               Audit Services audited in 2020 contained at least\r\n                               one public open source vulnerability—a 9% increase\r\n                                                                                                                                                            84%\r\n                               from the 75% of 2019 and the second-highest\r\n                               increase seen since 2017. Similarly, the percentage\r\n                                                                                                             78%\r\n                               of codebases containing high-risk open source                                                  75%\r\n                               vulnerabilities increased to 60% in 2020, a dramatic\r\n                                                                                            67%              77%\r\n                               11% increase from the 49% of the 2019 audits.\r\n                               “High-risk” indicates that a vulnerability has been\r\n                               actively exploited, has documented proof-of-concept\r\n                               exploits, or has been classified as a remote code                                     60%                                    60%\r\n                               execution vulnerability. Several of the top 10 open\r\n                               source vulnerabilities that were found in codebases\r\n                               in 2019 reappeared in the 2020 audits, all with\r\n                                                                                            53%\r\n                               significant percentage increases.\r\n                                                                                                                              49%\r\n\r\n\r\n\r\n                                                                                                                     40%\r\n                                                                                      0\r\n\r\n\r\n\r\n\r\n                                                                                            2016                                                           2020\r\n\r\n\r\n\r\n\r\n       10                      2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f                               PARALLELS BETWEEN                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\nVULNERABILITIES AND SECURITY\r\n\r\n\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n\r\n                               THE ‘STATE OF MOBILE\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n\r\n                               APPLICATION SECURITY’\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                        Android applications containing open source\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n                               AND OSSRA REPORTS                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●",
    "chunk_order_index": 2,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-f9d3f51abe37575669fa48168d84000b": {
    "tokens": 1200,
    "content": "●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                               The OSSRA results parallel the findings of the          ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                               CyRC’s 2021 “Peril in a Pandemic: State of Mobile       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n                               Application Security” report. For that report, CyRC     ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                               researchers used binary analysis to scan over 3,000     ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                               of the most popular Android applications in the         ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                        Android applications containing open source vulnerabilities\r\n                               Google Play Store. Over 98% of those applications\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n                               contained open source—and 63% contained                 ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●",
    "chunk_order_index": 3,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-509005a9ab2d53c89c6019455d54567c": {
    "tokens": 1200,
    "content": "●●●●●●●●●\r\n\r\n                               contained open source—and 63% contained                 ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                               vulnerable open source libraries. Nearly half of the    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                               open source vulnerabilities found in that report were   ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n                               identified as high risk.                                ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                               The “Peril in a Pandemic: State of Mobile               ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n                               Application Security” report shows the clear impact\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                        Vulnerabilities identified as high risk\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n                               the COVID-19 pandemic has had on the growth             ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                               of app downloads, as well as a corresponding            ●●●●●●●●●●●●●●●●●●",
    "chunk_order_index": 4,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-ac07ddaa5d11f14f1d10b3f7c50910a5": {
    "tokens": 1200,
    "content": "●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                               of app downloads, as well as a corresponding            ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                               likelihood that open source vulnerabilities are         ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n                               present in those apps. Similarly, the number of\r\n                               open source vulnerabilities increased in the audits\r\n                               reported in the 2021 OSSRA, and that increase is\r\n                               especially pronounced when looking at industry\r\n                               breakdowns.\r\n\r\n\r\n\r\n\r\n       11                      2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f                               Despite lockdowns and work-from-home policies,          Percentage of Codebases With Open Source Vulnerabilities                                                                 2020\r\nVULNERABILITIES AND SECURITY\r\n\r\n\r\n\r\n                               businesses still need to seek prospects, close deals,                                                                                                                            2019\r\n                                                                                                                                                   Aerospace, Aviation, Automotive,\r\n                               communicate with and support customers—all of                                                                       Transportation, Logistics\r\n                               which engendered a significant increase in the use                            Virtual Reality, Gaming,\r\n                                                                                                              Entertainment, Media                 100%              Big Data, AI, BI, Machine Learning\r\n                               of customer relationship technologies during 2020.\r\n                               Veeva Systems, a cloud computing company serving\r\n                                                                                               Telecommunications                                                                     Computer Hardware\r\n                               the healthcare sector, noted that it experienced                                                                                                       and Semiconductors\r\n                                                                                                      and Wireless                                 80%\r\n                               10 times more usage of its customer relationship\r\n                               management products during the pandemic.1 The\r\n                               videoconferencing company Zoom emerged as\r\n                                                                                                                                                   60%                                               Cyber\r\n                               one of the corporate success stories of 2020, as                Retail and\r\n                                                                                            E-Commerce                                                                                               Security\r\n                               video meetings became an essential part of work\r\n                               and school. And retailer L.L. Bean saw its best                                                                     40%\r\n                               revenue growth since 2011 and added 1 million new\r\n                               customers thanks to two hot retail segments fueled\r\n                               by the pandemic—comfort clothing and outdoor                                                                        20%\r\n                               gear.2                                                                                                                                                                     Ed Tech\r\n                                                                                         Marketing\r\n                               The OSSRA data notes that 100% of the companies               Tech\r\n                               audited in the marketing tech category—which\r\n                               includes lead-generation, CRM, and social media—\r\n                               contained open source in their codebases. Ninety-\r\n                               five percent of the marketing tech codebases also       Manufacturing,                                                                                                   Energy\r\n                               contained open source vulnerabilities. Seventy-one         Industrials,                                                                                                  and Clean\r\n                               percent of the audited retail and e-commerce                 Robotics                                                                                                    Tech\r\n                               codebases contained vulnerabilities. Both the\r\n                               financial services/fintech and the healthcare\r\n                               industry sectors had codebases with open source\r\n                                                                                                     Internet of                                                                             Enterprise\r\n                               vulnerabilities exceeding 60%.                                                                                                                                Software/SaaS\r\n                                                                                                         Things\r\n\r\n\r\n\r\n                                                                                                                   Internet and                                                 Financial Services\r\n                                                                                                                   Mobile Apps                                                  and FinTech\r\n                                                                                                                                    Internet and            Healthcare,\r\n                                                                                                                                       Software             Health Tech, Life\r\n                                                                                                                                  Infrastructure            Sciences\r\n\r\n\r\n\r\n\r\n       12                      2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f                               The top 10 vulnerabilities                                 Percentage of Codebases With Top 10 CVEs/BDSAs\r\nVULNERABILITIES AND SECURITY\r\n\r\n\r\n\r\n                               Several of the top 10 open source vulnerabilities—                              20%                               40%                            60%                  80%          100%\r\n                               including one that is a high-risk vulnerability—           BDSA-2019-1138 (CVE-2019-11358)\r\n                               appearing in the 2019 codebases reappeared in                                                                                                  15% increase since 2019\r\n                               the 2020 audits, some with significant increases in        BDSA-2017-2930 (CVE-2015-9251)\r\n                               percentages. CVE-2019-10744, a lodash vulnerability                                                                                       16% increase since 2019\r\n                               rated by the National Vulnerability Database (NVD)\r\n                                                                                          BDSA-2014-0063*\r\n                               as “critical” and affecting all versions of the popular\r\n                                                                                                                                                                         9% increase since 2019\r\n                               JavaScript library prior to 4.17.12, appeared in 29%\r\n                               of both years’ codebase audits.                            BDSA-2015-0567**\r\n\r\n                               Development teams appear to be struggling with",
    "chunk_order_index": 5,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-91eb09fc6afb8d4d4db56f9987849fa6": {
    "tokens": 1200,
    "content": "2019\r\n                               rated by the National Vulnerability Database (NVD)\r\n                                                                                          BDSA-2014-0063*\r\n                               as “critical” and affecting all versions of the popular\r\n                                                                                                                                                                         9% increase since 2019\r\n                               JavaScript library prior to 4.17.12, appeared in 29%\r\n                               of both years’ codebase audits.                            BDSA-2015-0567**\r\n\r\n                               Development teams appear to be struggling with                                                                                        4% increase since 2019\r\n                               the dynamic nature of open source security risk,           BDSA-2020-0964 (CVE-2020-11023)\r\n                               especially with the increase in open source use. An\r\n                               open source library with no vulnerabilities doesn’t\r\n                                                                                          BDSA-2020-0955 (CVE-2020-11022)\r\n                               necessarily stay that way a year or a month—\r\n                               sometimes not even a week—later. Access to reliable\r\n                               and diverse sources of vulnerability data is critical to   CVE-2019-1010266\r\n                               staying atop of open source risk. Ideally, vulnerability\r\n                               information should be pushed to developer or\r\n                                                                                          CVE-2019-10744\r\n                               security teams via the alert systems they already\r\n                                                                                                                                             29% in both years’ audits\r\n                               use, such as email, Slack, and Microsoft Teams.\r\n                                                                                          CVE-2018-16487\r\n\r\n\r\n                                                                                          CVE-2018-3721                                                                                                             2020\r\n                                                                                                                                                                                                                    2019\r\n\r\n\r\n\r\n\r\n                                                                                          *\r\n                                                                                            BDSA-2014-0063 is a high-severity vulnerability in which jQuery is vulnerable to cross-site scripting (XSS) due to lack of\r\n                                                                                          validation of user-supplied input. A fix is available.\r\n                                                                                          **\r\n                                                                                             BDSA- 2015-0567 affects all jQuery versions that use an unpatched UglifyJS parser, opening them to arbitrary code\r\n                                                                                          execution through crafted JavaScript files. A fix is available.\r\n\r\n\r\n\r\n\r\n       13                      2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f                               It’s also possible that the knowledge that the            Percentage of Codebases With Top 10 High-Risk CVEs/BDSAs\r\nVULNERABILITIES AND SECURITY\r\n\r\n\r\n\r\n                               codebase was dependent on a vulnerable open\r\n                                                                                                             20%               40%                  60%   80%   100%\r\n                               source library was buried somewhere inside the            CVE-2019-10744\r\n                               collective memory of the development team—\r\n                               possibly forgotten, possibly not documented at all.\r\n                               To fix an open source vulnerability, you first have to    BDSA-2018-4597 (CVE-2018-14719)\r\n                               know the vulnerability is there. Pinpointing vulnerable\r\n                               open source depends on identifying and inventorying       CVE-2018-16487\r\n                               all open source you’re using.\r\n                               Most applications are dependent on hundreds               BDSA-2015-0001 (CVE-2015-7501)\r\n                               of open source libraries—the average number of\r\n                               libraries found in the 2020 audits was 528 per\r\n                               codebase. An open source inventory or Bill of             BDSA-2015-0753 (CVE-2015-6420)\r\n                               Materials automatically generated by a software\r\n                               composition analysis tool can provide the                 CVE-2018-1000613\r\n                               comprehensive information needed to address\r\n                               security risk.\r\n                                                                                         CVE-2015-5652\r\n\r\n\r\n                                                                                         CVE-2020-8022\r\n\r\n\r\n                                                                                         CVE-2017-1000487\r\n\r\n\r\n                                                                                         CVE-2020-7598\r\n\r\n\r\n\r\n\r\n       14                      2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\fLICENSING\r\n\f            OPEN SOURCE LICENSING                                      Percentage of Codebases With License Conflicts\r\nLICENSING\r\n\r\n\r\n\r\n            Black Duck Audit Services found that 65% of the\r\n\r\n\r\n\r\n\r\n                                                                       100\r\n            2020 audited codebases contained open source with\r\n            license conflicts, a slight decrease from 2019. Nearly\r\n            three-quarters of the codebases with a license\r\n            conflict were specifically in conflict with one version\r\n            or another of the GNU General Public License.\r\n            Twenty-six percent of the codebases were found\r\n            to be using open source with no license or a\r\n            customized license. Codebases with customized\r\n            open source licenses need to be evaluated for\r\n            possible IP and other legal issues. The JSON license,\r\n            for example, essentially uses the permissive MIT\r\n            license with the addition, “The Software shall be\r\n            used for Good, not Evil.” Owners of many popular\r\n            projects—notably, Apache Foundation projects—have                85%\r\n            removed code using the JSON license because of\r\n            the license’s ambiguity; that is, although “software” is\r\n            a defined term, “good” and “evil” are open to arguable\r\n            interpretation.                                                                         68%\r\n                                                                                                                        67%\r\n            Codebases that include open source dependencies                                                                   65%\r\n            with no discernable license also may require\r\n            a decision about whether to replace those\r\n            dependencies altogether.\r\n            Broken down by industry, the sectors with the highest\r\n                                                                       60\r\n\r\n\r\n\r\n\r\n            percentage of codebases that contained open                      2017                                             2020\r\n            source license conflicts (86%) were the energy and\r\n            clean tech sector and the manufacturing, industrials,\r\n            robotics sector. The retail and e-commerce sector\r\n            had the lowest percentage of codebases with open\r\n            source",
    "chunk_order_index": 6,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-faf63fa8a7179b729eb9e7c1235388fe": {
    "tokens": 1200,
    "content": "discernable license also may require\r\n            a decision about whether to replace those\r\n            dependencies altogether.\r\n            Broken down by industry, the sectors with the highest\r\n                                                                       60\r\n\r\n\r\n\r\n\r\n            percentage of codebases that contained open                      2017                                             2020\r\n            source license conflicts (86%) were the energy and\r\n            clean tech sector and the manufacturing, industrials,\r\n            robotics sector. The retail and e-commerce sector\r\n            had the lowest percentage of codebases with open\r\n            source license conflicts at 47%.\r\n\r\n\r\n\r\n\r\n  16        2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f            Understanding license risk                                Percentage of Codebases With Licensing Conflicts, by Industry                                                            2020\r\nLICENSING\r\n\r\n\r\n\r\n                                                                                                                                                                                               2019\r\n            According to copyright law, using software in any                                                                     Aerospace, Aviation, Automotive,\r\n            way requires permission in the form of a license                                                                      Transportation, Logistics\r\n                                                                                            Virtual Reality, Gaming,\r\n            describing the rights conveyed to users and the                                  Entertainment, Media                 100%              Big Data, AI, BI, Machine Learning\r\n            obligations users must meet. Even the friendliest\r\n            open source licenses include obligations the user                 Telecommunications                                                                     Computer Hardware\r\n            takes on in return for use of the software.                              and Wireless                                 80%                                and Semiconductors\r\n\r\n            Open source license litigation (including those for\r\n            copyright, contract, antitrust, patenting, and fair                                                                   60%\r\n            use) is on the rise around the world.3 Potential                  Retail and                                                                                            Cyber\r\n                                                                           E-Commerce                                                                                               Security\r\n            license risk arises when a codebase includes open\r\n            source with licenses that appear to conflict with the                                                                 40%\r\n            overall license of the codebase. The most common\r\n            example of this is open source code under the GNU\r\n            General Public License v2.0 (GPLv2), which often                                                                      20%\r\n            creates a conflict when compiled into a distributed         Marketing                                                                                                        Ed Tech\r\n            piece of commercial software. But the same code                 Tech\r\n            isn’t a problem in software considered software as\r\n            a service (SaaS), because the GPL doesn’t consider\r\n            SaaS code to be “distributed.” This isn’t to imply that\r\n            SaaS software is immune from license conflicts;\r\n            some licenses can be problematic for SaaS as well.        Manufacturing,                                                                                                   Energy\r\n                                                                         Industrials,                                                                                                  and Clean\r\n                                                                           Robotics                                                                                                    Tech\r\n\r\n\r\n\r\n\r\n                                                                                    Internet of                                                                             Enterprise\r\n                                                                                        Things                                                                              Software/SaaS\r\n\r\n\r\n\r\n                                                                                                  Internet and                                                 Financial Services\r\n                                                                                                  Mobile Apps                                                  and FinTech\r\n                                                                                                                   Internet and            Healthcare,\r\n                                                                                                                      Software             Health Tech, Life\r\n                                                                                                                 Infrastructure            Sciences\r\n\r\n\r\n\r\n\r\n  17        2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f            Sometimes an open source component has a so-              Percentage of Codebases Containing Open Source With No License or Custom License\r\nLICENSING\r\n\r\n\r\n\r\n            called “custom license” in which the developer used\r\n\r\n\r\n\r\n\r\n                                                                      40\r\n            their own licensing language or added language to\r\n            a standard license. Such license additions are often\r\n            well-intentioned but can raise concerns, especially in\r\n            merger and acquisition transactions.\r\n            Whether open source or not, if third-party code\r\n            doesn’t have a license, serious legal issues can arise.\r\n            In the U.S. and many other jurisdictions, creative\r\n            work—including software—is placed under exclusive                                                     33%\r\n            copyright by default. Unless there’s a license that\r\n            specifies otherwise (or the copyright holders grant\r\n            permission), no other party can use, copy, distribute,\r\n            or modify the software without the risk of litigation.\r\n\r\n\r\n\r\n\r\n                                                                                                                                                         26%\r\n\r\n                                                                      20   25%\r\n\r\n\r\n\r\n\r\n                                                                           2018                                                                          2020\r\n\r\n\r\n\r\n\r\n  18        2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\fSUSTAINABILITY\r\n\f                 OPEN SOURCE SUSTAINABILITY                              Percentage of Codebases Containing Components That Have Had No Development Activity\r\nSUSTAINABILITY\r\n\r\n\r\n\r\n                                                                         Within the Past Two Years\r\n                 Of the 1,500+ codebases examined by Black\r\n                 Duck Audit Services in 2020, a staggering 91%\r\n\r\n\r\n\r\n\r\n                                                                         100\r\n                 contained open source dependencies that had\r\n                 had no development activity in the last two years.\r\n                 That figure means 91% of the codebases audited\r\n                 contained dependencies with no feature upgrades,\r\n                 no code improvements, and no security issues fixed\r\n                 over the past two years.\r\n                 One of the reasons behind the popularity of open\r\n                 source is the volunteer communities continuously\r\n                 updating code and addressing vulnerabilities.                                                                                                  91%\r\n                 Software developer and author Eric Raymond calls\r\n                 this Linus’s Law in action: with many eyes looking at\r\n                 code, “all bugs become shallow.” A Purdue University\r\n                 study showed that Linus’s Law does work4—open                                                      88%\r\n                 source communities regularly issue patches faster\r\n                 than their proprietary software counterparts. But\r\n                 there’s no guarantee that the volunteer community\r\n                 behind any given open source project will continue\r\n                                                                               85%\r\n                 maintaining the code indefinitely or that the\r\n                 community will continue to have members who are\r\n                 knowledgeable about the project’s code.\r\n                                                                         80\r\n\r\n\r\n\r\n\r\n                                                                               2018                                                                            2020\r\n\r\n\r\n\r\n\r\n   20            2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f                 THE PRICE OF POPULARITY\r\nSUSTAINABILITY\r\n\r\n\r\n\r\n\r\n                 When an open source library becomes popular,\r\n                 the price is increased pressure on its (usually\r\n                 unpaid) maintainers—the people who handle bug\r\n                 reports,",
    "chunk_order_index": 7,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-2424220ed6cceb988ce3568a8aebbe69": {
    "tokens": 1200,
    "content": "have members who are\r\n                 knowledgeable about the project’s code.\r\n                                                                         80\r\n\r\n\r\n\r\n\r\n                                                                               2018                                                                            2020\r\n\r\n\r\n\r\n\r\n   20            2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f                 THE PRICE OF POPULARITY\r\nSUSTAINABILITY\r\n\r\n\r\n\r\n\r\n                 When an open source library becomes popular,\r\n                 the price is increased pressure on its (usually\r\n                 unpaid) maintainers—the people who handle bug\r\n                 reports, feature requests, code reviews, and code\r\n                 commits for the free software. It’s not unusual for\r\n                 the maintainers to be a solo developer—a “random\r\n                 person from Nebraska,” as the popular xkcd internet\r\n                 comic has it.5\r\n                 That random person is often the only bulwark\r\n                 supporting their piece of the open source\r\n                 infrastructure that modern software depends on.\r\n                 As an open source project grows in popularity—with\r\n                 no corresponding growth in people maintaining\r\n                 the project—the consequence is often developer\r\n                 burnout, and many open source projects are\r\n                 abandoned. The problem is severe enough that\r\n                 The Core Infrastructure Initiative was created to\r\n                 enable technology companies to collaboratively\r\n                 identify and fund open source projects that are in\r\n                 need of assistance, while still allowing developers\r\n                 to continue their work under the community norms\r\n                 that have made open source so successful.\r\n\r\n\r\n\r\n\r\n   21              2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f                         2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.                   22\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n\r\n\r\nOUT-OF-DATE\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        than four years behind the latest versions?\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n\r\n\r\nTHAN FOUR YEARS\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        audited codebases with open source libraries more\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        be justifiable, but what are we to make of the 85% of\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n\r\n\r\nTHAT WERE MORE\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        a dependency update for six months to a year may\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        dependencies their applications call on? Postponing\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n\r\n\r\nSOURCE COMPONENTS\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        fix it”? Were they even aware of the version of the\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        an update? Was their thinking “if it ain’t broke, don’t\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n\r\n\r\nCONTAINED OPEN\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        determine that the risk was low enough to put off\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●",
    "chunk_order_index": 8,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-6d538114f5ea3f7a960e0e93f8de1eb6": {
    "tokens": 1200,
    "content": "●●●●●●●●●●●●●\r\n\r\n\r\n\r\nCONTAINED OPEN\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        determine that the risk was low enough to put off\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        been available since July 2019. Did the developers\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n\r\n\r\nCODEBASES\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        of the library that addresses the vulnerability has\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        contained CVE-2019-10744, even though an upgrade\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n\r\n\r\nOF AUDITED\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        codebases in both the 2020 and 2019 audits\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        in the “Top 10 vulnerabilities” section, 29% of the\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        Returning to the lodash vulnerability mentioned\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        keep their open source dependencies up-to-date.\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        it’s clear that development teams are struggling to\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        with many newer versions available. As noted earlier,\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        source library with newer versions available—often\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        of-date. That is, the codebases were using an open\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        dependencies that were more than four years out-\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        Audit Services examined in 2020 had open source\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                                                  SUSTAINABILITY\r\n\r\n\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        Eighty-five percent of the codebases Black Duck",
    "chunk_order_index": 9,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-6a841ff1b237ae593f2eb182bbddf949": {
    "tokens": 1200,
    "content": "●●●●\r\n                                                        Audit Services examined in 2020 had open source\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                                                  SUSTAINABILITY\r\n\r\n\r\n                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                        Eighty-five percent of the codebases Black Duck\r\n\fCONCLUSION\r\n\f             THE PETER PARKER PRINCIPLE                               of building software—65%—have policies in place           Does your organization have a published\r\nCONCLUSION\r\n\r\n\r\n\r\n                                                                      allowing their developers to contribute to open           policy for its developers to make open source\r\n             “With great power comes great responsibility.”\r\n                                                                      source projects.                                          contributions?\r\n             —anon., often attributed to Stan Lee\r\n                                                                      As this report has stated, paralleling the growth of      (“DevSecOps Practices and Open Source Management in\r\n             How does it feel to be part of a revolution? As the                                                                2020” survey)\r\n                                                                      open source is a growth in risk—specifically around\r\n             data in the 2021 OSSRA report demonstrates, it’s\r\n                                                                      open source security, code quality, and sustainability.\r\n             rare today to find an application that isn’t dependent\r\n                                                                      Part of the reason is that the increased use of open\r\n             on the power of open source. Not only is more\r\n                                                                      source makes managing a dynamic, changing risk            Yes\r\n             open source in use, but more developers are writing\r\n                                                                      landscape more difficult. To meet the challenge,\r\n             open source. The 2020 FOSS Contributor Report\r\n                                                                      development teams need to have reliable and timely\r\n             sponsored by the Linux Foundation notes that nearly\r\n                                                                      vulnerability information, a comprehensive inventory\r\n             half of respondents to its survey were being paid\r\n                                                                      of the open source dependencies their software\r\n             by their organizations to contribute to open source\r\n                                                                      uses, accurate guidance on vulnerability severity and\r\n             projects.6 A CyRC survey (“DevSecOps Practices\r\n                                                                      exploitability, and clear direction on how to patch the\r\n             and Open Source Management in 2020”) indicates\r\n                                                                      affected open source.\r\n             that the majority of organizations in the business\r\n\r\n\r\n\r\n\r\n  24         2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f             Mistakes versus malice\r\nCONCLUSION\r\n\r\n\r\n\r\n             Although malicious attacks tend to steal the                   COVERITY SCAN DATA\r\n             spotlight in the media, code flaws introduced by\r\n             mistake can be just as disruptive and are much more\r\n             likely to impact open source projects. According to\r\n             the “2020 State of the Octoverse” report, 83% of the       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             vulnerabilities that GitHub sent alerts on from 2019       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             through 2020 were due to coding errors rather than         ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             malicious intent.7                                         ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●",
    "chunk_order_index": 10,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-622527f24fb39fb06f7c6e39b74de8a4": {
    "tokens": 1200,
    "content": "●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             If most attacks exploit unintentional vulnerabilities in\r\n                                                                                                                                ACTIVE\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             code, preventing these unintentional vulnerabilities       ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             becomes all the more crucial. One strategy\r\n                                                                                                                                PROJECTS\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             is to educate developers on secure software                ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             development. Free courses from OpenSSF are\r\n                                                                                                                                SCANNED\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             available on edX, and many software security               ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●",
    "chunk_order_index": 11,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-34d3271e4cb294784e304dd16023ec80": {
    "tokens": 1200,
    "content": "●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             companies such as Synopsys offer commercial                ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n             application security eLearning courses.                    ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n             Encouraging the use of detection tools such as\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n             static analysis before code commit is another\r\n                                                                        ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n\r\n\r\n             means to reduce open source coding errors. Static\r\n             analysis examines source code against a set of\r\n\r\n                                                                                                                    BILLION LINES\r\n             coding rules to uncover common coding errors.\r\n             Synopsys offers a free static analysis service for\r\n\r\n                                                                                                                    OF CODE\r\n             open source developers who have registered their\r\n             projects with scan.coverity.com. Coverity Scan is\r\n\r\n                                                                                                                    SCANNED\r\n             powered by the same engine used by Synopsys’\r\n             commercial Coverity static analysis tool to help\r\n             identify code defects for fast and easy remediation.\r\n             Respondents to the Linux Foundation survey\r\n             “overwhelmingly cited Coverity Scan and clang\r\n             security checkers” as the primary static analysis              Top 10 defects/vulnerabilities found in the scans\r\n             tools they use.8 The next page details a case study\r\n                                                                                     Resource leaks                     Uninitialized variables\r\n             on how Coverity Scan helps ensure code quality and\r\n             security for NGINX Open Source.                                   Null pointer dereferences                  Cross-site scripting\r\n                                                                                   Memory corruptions                Extra argument error in call\r\n                                                                                 Error handling issues                   Insecure data handling\r\n                                                                                  Control flow issues                      Uncaught exception\r\n\r\n\r\n\r\n\r\n  25         2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f                                NGINX OPEN                              than 400 million websites. Sysoev cofounded              “High-impact” outstanding defects\r\nCONCLUSION\r\n\r\n\r\n\r\n                                                                        NGINX in 2011 to provide formal support for NGINX\r\n                                SOURCE                                  Open Source and to offer a commercial version,           Memory               ●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                                                                                                      ●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        NGINX Plus, which adds enterprise-grade features         corruptions\r\n                                A Coverity Scan\r\n                                                                                                                                                      ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● (75)\r\n\r\n                                                                        to NGINX Open Source.",
    "chunk_order_index": 12,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-b37aeb320c376c78ff3cb0e987ccdcd8": {
    "tokens": 1200,
    "content": "●●●●●●●●●●●●●\r\n                                                                                                                                                      ●●●●●●●●●●●●●●●●●●●●●●●●●●\r\n                                                                        NGINX Plus, which adds enterprise-grade features         corruptions\r\n                                A Coverity Scan\r\n                                                                                                                                                      ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● (75)\r\n\r\n                                                                        to NGINX Open Source.\r\n                                Case Study                                                                                       Uninitialized\r\n                                                                                                                                                      ● ● ● ● ● ● ● ● (8)\r\n                                                                        NGINX was acquired by F5 Networks, an application        variables\r\n             One of the world’s most widely used web servers—           security and delivery company, in 2019. Today, the\r\n             powering sites such as Netflix, Hulu, Pinterest, and       NGINX family of open source projects include njs,        Memory\r\n                                                                                                                                                      ● ● ● ● (4)\r\n             GitHub—NGINX Open Source (pronounced “engine               a module adding JavaScript support to NGINX and          (illegal accesses)\r\n\r\n             x”) is known for its high performance, stability, rich     NGINX Unit, a dynamic application server.\r\n             feature set, simple configuration, and low resource                                                                 Various              ● (1)\r\n\r\n             consumption. Other members of the NGINX Open               The problem: Ensuring open source code\r\n             Source family include NGINX JavaScript (njs),              quality and security\r\n             a module adding JavaScript support to NGINX;               “We integrated Coverity Scan into our CI/CD              vulnerabilities that GitHub sent alerts on from 2019\r\n             and NGINX Unit, a dynamic application server               pipeline soon after establishing NGINX,” said Maxim      through 2020 were due to coding errors rather than\r\n             supporting applications written in Perl, Python,           Konovalov, one of the company’s cofounders and           malicious intent.\r\n             Ruby, Node.js, Go, Java, and PHP.njs.                      now VP of engineering. “We’ve been submitting\r\n                                                                                                                                 But malicious attacks do exploit flaws in code, and\r\n                                                                        NGINX build artifacts daily since 2012.”\r\n             Developers for all three NGINX Open Source                                                                          developers need to embrace proactive detection\r\n             projects use Coverity Scan® to find and fix defects        “In many cases, NGINX acts as an internet front          tools to uncover bugs in the code they write. Static\r\n             in their code. A free online service provided by           end,” continued Konovalov. “Its security and stability   analysis examines source code against a set of\r\n             Synopsys and powered by the same engine used by            are essential to its users. My team is passionate        coding rules to uncover common coding errors.\r\n             Synopsys’ commercial Coverity static analysis tool,        about code quality and are always looking for best\r\n             Scan helps open source developers identify code            practices and tools to help us improve it. Static        The results: 658,000 lines of code scanned\r\n             defects for fast and easy remediation.                     code analyzers such as Coverity Scan provide a           with a defect density of 0.02%\r\n                                                                        great help to us.”                                       In the January 2021 Coverity Scan of a NGINX build,\r\n             “I have a strong belief in the power of open\r\n                                                                                                                                 658,665 lines of code were analyzed, and various\r\n             source,” said Igor Sysoev, the software’s author and       NGINX takes its role as a foundational technology\r\n                                                                                                                                 code defects uncovered, including two CWE Top\r\n             cofounder of NGINX in a 2014 interview. “NGINX             to millions of apps and websites very seriously.\r\n                                                                                                                                 25 defects. Thanks to F5’s regular use of Coverity\r\n             was an experiment focused on a very specific               Code quality and security are part of its ethos, and\r\n                                                                                                                                 Scan, the NGINX project has a defect density\r\n             problem—how to handle more customers on a                  the tools that help support that mission are integral\r\n                                                                                                                                 (number of defects per 1,000 lines of code) of only\r\n             single, existing server. It turned out to be a universal   to its development practices.\r\n                                                                                                                                 0.02%.\r\n             problem. As soon as I realized NGINX really helps to\r\n             improve web performance, I wanted people to use it,        The solution: Static code analysis with                  “Coverity Scan provides an invaluable service to\r\n             so I made it open source.”                                 Coverity Scan                                            us,” says Maxim Konovalov. “I regularly recommend\r\n                                                                        Contrary to popular opinion, most software               Coverity Scan and its ability to provide specific defect\r\n             A web server that can also be used as a reverse\r\n                                                                        vulnerabilities are the result of coding mistakes,       IDs in code commits. And in fact, I’m a member of\r\n             proxy, load balancer, mail proxy, and HTTP cache,\r\n                                                                        not malicious attacks. According to the “2020            the FreeBSD committers group, and we use Coverity\r\n             the open source version of NGINX powers more\r\n                                                                        State of the Octoverse” security report, 83% of the      Scan for code analyses of FreeBSD as well.”\r\n\r\n\r\n\r\n\r\n  26         2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f             Create demand for a Bill of Materials                    If software vendors can anticipate that their             Coda\r\nCONCLUSION\r\n\r\n\r\n\r\n                                                                      enterprise customers will require a software BOM,\r\n             The concept of a software Bill of Materials (BOM)                                                                  Whether you believe it was Voltaire or Peter Parker’s\r\n                                                                      it’s fair to anticipate",
    "chunk_order_index": 13,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-9735e1136e0e20526fd09a8758cc1e84": {
    "tokens": 1200,
    "content": "code analyses of FreeBSD as well.”\r\n\r\n\r\n\r\n\r\n  26         2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f             Create demand for a Bill of Materials                    If software vendors can anticipate that their             Coda\r\nCONCLUSION\r\n\r\n\r\n\r\n                                                                      enterprise customers will require a software BOM,\r\n             The concept of a software Bill of Materials (BOM)                                                                  Whether you believe it was Voltaire or Peter Parker’s\r\n                                                                      it’s fair to anticipate the same for the open source\r\n             comes from manufacturing, where the classic                                                                        Uncle Ben who first said, “with great power comes\r\n                                                                      projects the software depends upon. For many\r\n             BOM is an inventory detailing the items included                                                                   great responsibility,” you can’t deny the proverb’s\r\n                                                                      projects this can be done, at least in part, by package\r\n             in a product. When a defective part is discovered,                                                                 accuracy. As part of the open source ecosystem we\r\n                                                                      management information that identifies direct\r\n             the manufacturer knows precisely what product                                                                      all share in its power—and we all share responsibility\r\n                                                                      and indirect dependencies. Software composition\r\n             is affected and can begin the process of repair or                                                                 to keep open source safe and secure. It’s time we\r\n                                                                      analysis tools can use this information to create\r\n             replacement.                                                                                                       exercise our power as developers and consumers of\r\n                                                                      more complete (specific versions, license, etc.) BOM\r\n                                                                                                                                open source and take on the shared responsibility of\r\n             While still a new concept to many, the demand            information.\r\n                                                                                                                                maintaining open source quality and security.\r\n             for open source BOMs is growing. In its 2020\r\n                                                                      Open source consumers should expect that\r\n             Magic Quadrant for Application Security Testing,\r\n                                                                      many projects—especially those with few active\r\n             Gartner predicted, “By 2024, the provision of a\r\n                                                                      contributors—won’t be ready to provide BOMs. This\r\n             detailed, regularly updated software Bill of Materials\r\n                                                                      may be the perfect opportunity for companies that\r\n             by software vendors will be a non-negotiable\r\n                                                                      depend on open source projects to help develop and\r\n             requirement for at least half of enterprise software\r\n                                                                      maintain the project’s BOM.\r\n             buyers, up from less than 5% in 2019.”9\r\n\r\n\r\n\r\n\r\n  27           2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\f             FURTHER READING                                      REFERENCES\r\nCONCLUSION\r\n\r\n\r\n\r\n               • Backstabber’s Knife Collection: A Review of      1.   Tyler Clifford, Veeva Systems sees product usage increase\r\n                                                                       tenfold as biotech companies race to find COVID-19 cure, CNBC,\r\n                 Open Source Software Supply Chain Attacks             3/26/2020.\r\n               • Dependency Confusion: How I Hacked               2.   David Sharp, L.L. Bean Sees Sales Boom Amid Pandemic’s Push\r\n                 Into Apple, Microsoft and Dozens of Other             to Outdoors, U.S. News, 3/19/2021.\r\n                 Companies                                        3.   Wikipedia, Open source license litigation, accessed 3/26/2021.\r\n               • DevSecOps Practices and Open Source              4.   Kemal Altinkemer, Jackie Rees, and Sanjay Sridhar;\r\n                 Management in 2020                                    Vulnerabilities and Patches of Open Source Software: An\r\n                                                                       Empirical Study, Krannert Graduate School of Management, The\r\n               • Finding Critical Open Source Projects (Google         Center for Education and Research in Information Assurance\r\n                 blog)                                                 and Security, Purdue University; 1/2005.\r\n                                                                  5.   Explain xkcd, 2347: Dependency, 8/17/2020.\r\n                    - Related: Finding Critical Open Source\r\n                                                                  6.   Frank Nagle et al, Report on the 2020 FOSS Contributor Survey,\r\n                      Projects (Top 10 list)                           The Linux Foundation, 12/8/2020.\r\n               • Get earlier, actionable vulnerability insights   7.   GitHub, Nicole Forsgren et al, The 2020 State of the Octoverse,\r\n                                                                       2020.\r\n                 from Black Duck Security Advisories\r\n                                                                  8.   Frank Nagle et al, Report on the 2020 FOSS Contributor Survey,\r\n               • How the Linux Foundation’s Software Signing\r\n                                                                       The Linux Foundation, 12/8/2020.\r\n                 Combats Supply Chain Attacks\r\n                                                                  9.   Mark Horvath, Dionisio Zumerle, and Dale Gardner, Magic\r\n                    - Related: What is sigstore?                       Quadrant for Application Security Testing, Gartner, 4/29/2020.\r\n\r\n               • Know, Prevent, Fix: A framework for shifting\r\n                 the discussion around vulnerabilities in open\r\n                 source\r\n               • Open source licenses: No license, no\r\n                 problem? Or … not?\r\n               • OpenSSF: Secure Software Development\r\n                 Fundamentals Courses\r\n               • Peril in a Pandemic: The State of Mobile\r\n                 Application Security\r\n               • Preventing Supply Chain Attacks like\r\n                 SolarWinds\r\n               • TANSTAAFL! The tragedy of the commons\r\n                 meets open source software\r\n               • What is a software bill of materials?\r\n\r\n\r\n\r\n\r\n  28          2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\fThe Synopsys difference\r\nSynopsys helps development teams build secure, high-quality software, minimizing risks while maximizing speed and productivity. Synopsys, a recog-\r\nnized leader in application security, provides static analysis, software composition analysis, and dynamic analysis solutions that enable teams to quickly\r\nfind and fix vulnerabilities and defects in proprietary code, open source components,",
    "chunk_order_index": 14,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-e35677cdd37433b603b6105b350aabcf": {
    "tokens": 380,
    "content": "28          2021 OPEN SOURCE SECURITY AND RISK ANALYSIS REPORT | ©2021 SYNOPSYS, INC.\r\n\fThe Synopsys difference\r\nSynopsys helps development teams build secure, high-quality software, minimizing risks while maximizing speed and productivity. Synopsys, a recog-\r\nnized leader in application security, provides static analysis, software composition analysis, and dynamic analysis solutions that enable teams to quickly\r\nfind and fix vulnerabilities and defects in proprietary code, open source components, and application behavior. With a combination of industry-leading\r\ntools, services, and expertise, only Synopsys helps organizations optimize security and quality in DevSecOps and throughout the software development\r\nlife cycle.\r\n\r\n\r\nAbout CyRC\r\nThe Synopsys Cybersecurity Research Center (CyRC) works to accelerate access to information around the identification, severity, exploitation, mitigation,\r\nand defense against software vulnerabilities. Operating within the greater Synopsys mission of making the software that powers our lives safer and of\r\nthe highest quality, CyRC helps increase awareness of issues by publishing research supporting strong cybersecurity practices. For more information, go\r\nto www.synopsys.com/software .\r\n\r\n\r\nSynopsys, Inc.                                      Contact us:                                          ©2021 Synopsys, Inc. All rights reserved. Synopsys is a\r\n690 E Middlefield Rd,                               U.S. Sales: 800.873.8193                             trademark of Synopsys, Inc. in the United States and other\r\nMountain View, CA 94043 USA                         International Sales: +1 415.321.5237                 countries. A list of Synopsys trademarks is available at\r\n                                                    Email: sig-info@synopsys.com                         www.synopsys.com/copyright.html. All other names\r\n                                                                                                         mentioned herein are trademarks or registered trademarks\r\n                                                                                                         of their respective owners. April 2021.",
    "chunk_order_index": 15,
    "full_doc_id": "doc-f0509ff2e653e4ac2714adc9a91bbbb2"
  },
  "chunk-b29305d2ed054bb6225c8b410edd6b80": {
    "tokens": 1200,
    "content": "2021 Software Vulnerability Snapshot\r\nAn Analysis by Synopsys Application Security Testing Services\r\n\fTable of contents\r\n\r\nOverview.......................................................................................................................................................1\r\n\r\n    Types of Security Testing.....................................................................................................................2\r\n\r\n    About Third-Party Application Security Testing Services.............................................................. 2\r\n\r\n    The Need for a Complete Software Security Testing Spectrum.................................................. 4\r\n\r\nVulnerabilities and Security Issues......................................................................................................... 5\r\n\r\nVulnerabilities Breakdown by the 2021 OWASP Top 10 .................................................................... 5\r\n\r\n    A01:2021—Broken Access Control..................................................................................................... 6\r\n\r\n    A02:2021—Cryptographic Failures .................................................................................................... 7\r\n\r\n    A03:2021—Injection...............................................................................................................................7\r\n\r\n    A05:2021—Security Misconfiguration............................................................................................... 7\r\n\r\n    A07:2021—Identification and Authentication Failures................................................................... 7\r\n\r\nTypes of Tests ............................................................................................................................................7\r\n\r\n    Top Vulnerabilities Found in Mobile Tests Matched Against OWASP Risks.............................. 9\r\n\r\nConclusion and Key Takeaways.............................................................................................................. 10\r\n\r\n    Testing with a Full Spectrum of Security Tools............................................................................... 11\r\n\r\n    Even Lower-Risk Vulnerabilities Can Be Exploited to Facilitate Attacks..................................... 11\r\n\r\n    An Urgent Need for a Software Bill of Materials.............................................................................. 11\r\n\r\nAbout CyRC Research...............................................................................................................................12\r\n\r\n\r\n\r\n\r\n                                                                                                                                                | synopsys.com | 2\r\n\fOverview\r\nSynopsys Cybersecurity Research Center (CyRC) researchers recently examined\r\nanonymized data from commercial software systems and applications tested by\r\nSynopsys application security testing services during 2020. The following report\r\nincludes data from 3,900 tests conducted on 2,600 targets (i.e., software or systems).\r\nAlmost all of the tests (98%) were intrusive “opaque box” and “semi-opaque box” tests,\r\nincluding penetration tests, dynamic application security tests, and mobile application\r\nsecurity analyses.\r\n\r\n\r\n\r\n\r\nIndustries represented in the study\r\n\r\n                                                    Software and Internet\r\n\r\n\r\n                                                                      29%\r\n                                                         Financial Services\r\n\r\n\r\n                                                                      28%\r\n   Business Services\r\n                                                   9%             Media and\r\n                               14%                             Entertainment\r\n\r\n                                                   Healthcare                 5%\r\n 10%\r\n                    Manufacturing                   Other                      5%\r\n                                                                             | synopsys.com | 1\r\n\fTypes of Security Testing\r\nThe majority of the tests—98%—were intrusive “opaque box” and “semi-opaque box” tests, including penetration testing, dynamic\r\napplication security testing, and mobile application security analyses. Opaque box testing approaches the target’s security state\r\nfrom an outsider’s perspective, whereas semi-opaque box testing simulates an authenticated user with credentials—essentially\r\nextending opaque box testing with deeper insights. The tests were designed to probe running applications as a real-world\r\nattacker would, with the goal of identifying vulnerabilities that could then be triaged and remediated as necessary.\r\n\r\nThe targets tested were largely web (83%) and mobile (12%) applications, with the remainder either source code or network\r\nsystems/applications. The industries represented included software and internet (29%), financial services (28%), business\r\nservices (14%), manufacturing (10%), media and entertainment (9%), and healthcare (5%). The remaining 5% of test targets\r\nrepresented education, energy and utilities, and other verticals.\r\n\r\nThe tests focused on identifying software weaknesses, known as Common Weakness Enumerations (CWEs). These are flaws or\r\nerrors in code that when left unaddressed can make software or a system vulnerable to attack.\r\n\r\nAbout Third-Party Application Security Testing Services\r\nOrganizations use third-party application security testing services such as those offered by Synopsys for a variety of reasons.\r\nSome want to validate their own testing and ensure their internal security controls are working. Others need to comply with\r\nregulatory or business requirements that mandate a third-party assessment, while still others want to extend their software\r\nsecurity testing without having to add specialized tools and staff. The 2021 BSIMM12 Insight and Trends report found that 87%\r\nof the organizations participating in the Building Security In Maturity Model (BSIMM) project use external penetration testers to\r\nuncover issues that might have been missed by internal testing.\r\n\r\n\r\n\r\n\r\n               87%\r\n                                                                of the organizations participating\r\n                                                                 in the BSIMM project use external\r\n                                                                  penetration testers to uncover\r\n                                                                   issues that might have been\r\n                                                                    missed by internal teams.\r\n\r\n\r\n\r\n\r\n                                                                                                                  | synopsys.com | 2\r\n\fSynopsys Application Security Testing\r\nServices 2020 by the Numbers\r\n            Number of             Tests That Uncovered\r\n          Test Targets:\r\n                                  Vulnerabilities:\r\n                 2,573\r\n\r\n                                                                     97%\r\n    Number of Tests:\r\n                 3,937                          3,828\r\n\r\n Number of Tests                                         Total Number of\r\n with High or                                            Vulnerabilities\r\n Critical Severity                                       Discovered:\r\n Vulnerabilities:\r\n                                                           28,501\r\n 1,420                              36%\r\nTop Vulnerability            Top High-Risk                   Top Critical Vulnerability\r\nDiscovered: Missing          Vulnerability Discovered:       Discovered: SQL\r\nContent-Security-Policy      Stored Cross-Site               Injection\r\nHeader                       Scripting\r\n\r\n                52%                           28%            3%\r\n\r\nTypes of Tests\r\n                                                  Web App Pen Testing: 2,558 (67%)\r\n             Web App Dynamic Analysis: 630 (16%)\r\n\r\n          Mobile App Testing: 472 (12%)\r\n  Source Code Analysis: 88 (2%)\r\n   Network Security Pen Testing: 75 (2%)\r\n\r\n\r\n\r\n                                                                             | synopsys.com | 3\r\n\fThe Need for a Complete Software Security Testing Spectrum\r\nBusinesses that sell software, or sell products that include embedded software, can’t afford software security, compliance,\r\nor quality issues compromising those products. Even businesses not directly engaged in selling software or software",
    "chunk_order_index": 0,
    "full_doc_id": "doc-ac183a4652718b84dc5e6eb96aa27198"
  },
  "chunk-861c30148029f53a3c2b8266de62e7bd": {
    "tokens": 1200,
    "content": "630 (16%)\r\n\r\n          Mobile App Testing: 472 (12%)\r\n  Source Code Analysis: 88 (2%)\r\n   Network Security Pen Testing: 75 (2%)\r\n\r\n\r\n\r\n                                                                             | synopsys.com | 3\r\n\fThe Need for a Complete Software Security Testing Spectrum\r\nBusinesses that sell software, or sell products that include embedded software, can’t afford software security, compliance,\r\nor quality issues compromising those products. Even businesses not directly engaged in selling software or software-\r\ndriven products depend on software quality and security. For example, software drives the administrative systems for most\r\npayroll, billing, receivables, sales tracking, and customer records. Software controls production, manages inventories, directs\r\nwarehousing, and runs the distribution systems that keep a business running.\r\n\r\nSoftware is also the primary way that most businesses interact with and support customers, and these systems can also\r\nfall prey to attack. The giant credit risk assessment firm Equifax is not considered a software company, but a breach of the\r\nunderlying software framework of an Equifax customer portal exposed the personal data of 143 million U.S. consumers in 2017.\r\n\r\n\r\n\r\n\r\n   Humans should perform the security tests\r\n   they’re the most effective at carrying out,\r\n\r\n\r\n\r\n\r\n                   with their efforts augmented by\r\n                          automated testing.\r\nSoftware risk is business risk, and to effectively manage the second, you must address the first. While “transparent box” testing\r\nsuch as static application security testing (SAST) can bring visibility to security issues early in the software development life\r\ncycle, SAST cannot uncover runtime security vulnerabilities. And some vulnerabilities cannot be easily detected by automated\r\ntesting tools—they need human oversight to be uncovered.\r\n\r\nFor example, the only effective way to detect an insecure direct object reference (IDOR), an issue that allows attackers to\r\nmanipulate references in order to gain access to unauthorized data, is by having a human perform a manual test. Clearly, there\r\nis no one best approach to application security testing. Humans need to perform the security tests they’re the most effective at\r\ncarrying out, with their efforts augmented by automated testing.\r\n\r\nA full spectrum of application security testing is an essential component of managing software risk in today’s world. When an\r\norganization lacks the needed human resources or tools to perform high-level opaque/semi-opaque box security testing such as\r\npenetration testing, or needs to vet its own software security controls, working with a third party such as Synopsys may be the\r\nbest solution.\r\n\r\n\r\n\r\n\r\n                                                                                                                   | synopsys.com | 4\r\n\fVulnerabilities and Security Issues\r\nOf the 3,900 tests, 97% uncovered some form of vulnerability in the targets. Thirty percent of the total were high-risk\r\nvulnerabilities, and 6% were critical-risk vulnerabilities. The easy availability of automated exploitation tools makes fixing high-\r\nand critical-risk vulnerabilities urgent whenever discovered.\r\n\r\nHigh-risk vulnerabilities such as cross-site scripting (XSS) are issues that could allow attackers to access application resources\r\nand data. Twenty-eight percent of the test targets had exposure to reflected, stored, or DOM-based cross-site scripting\r\nvulnerabilities.\r\n\r\nCritical-risk vulnerabilities allow attackers to execute code on a web application or application server and access sensitive data.\r\nCommon critical-risk vulnerabilities include remote code execution and SQL injection—insertion of a SQL query via the input data\r\nfrom the client to the application. Three percent of the total test targets were vulnerable to some type of SQL injection.\r\n\r\n\r\n\r\n\r\n                                                        The easy availability of automated\r\n                                                          exploitation tools makes fixing\r\n                                                        high- and critical-risk vulnerabilities\r\n                                                              urgent when discovered.\r\n\r\n\r\n   High-Risk                              Percentage of                  Critical-Risk                          Percentage of\r\n                                          Vulnerability in                                                      Vulnerability in\r\n   Vulnerability                          Total Test Targets             Vulnerability                          Total Test Targets\r\n\r\n   Reflected, Stored, or DOM-Based        28%                            SQL Injection                          2%\r\n   Cross-Site Scripting                                                  Blind SQL Injection                    1%\r\n   Improper Restriction of Excessive      6%\r\n   Authentication Attempts\r\n   Vertical Privilege Escalation          6%\r\n   Missing Authentication                 2%\r\n   HTTPS Not Enabled                      2%\r\n\r\n         Table 1: Top High-Risk Vulnerabilities Found                          Table 2: Top Critical-Risk Vulnerabilities Found\r\n\r\n\r\n\r\nVulnerabilities Breakdown by the 2021 OWASP Top 10\r\nThe Open Web Application Security Project (better known as OWASP) Top 10 list represents a consensus among a large\r\nsampling of developers and web application security teams on the most critical security risks to web applications. In late 2021,\r\nthe Top 10 list was updated for the first time since 2017, with three new categories added and others consolidated or with name\r\nand scope changes.\r\n\r\nWhile intended by OWASP as an awareness document, many organizations use the list as a de facto application security\r\nstandard. It’s interesting to see how the tests conducted by Synopsys correlate with the OWASP Top 10.\r\n\r\nOf the total 28,501 vulnerabilities discovered in the tests, 21,810—76%—fell into a 2021 OWASP Top 10 category. Table 3 lists\r\nthe 10 most prevalent vulnerabilities Synopsys found, matched against five of the OWASP Top 10 categories. If the list had been\r\nextended further, all 10 of the OWASP categories would have been represented. For example, Vulnerable Third-Party Libraries\r\nin Use, which was found in 18% of the pen tests, correlates with the 2021 OWASP Top 10 category A06:2021—Vulnerable and\r\nOutdated Components.\r\n\r\n\r\n\r\n                                                                                                                      | synopsys.com | 5\r\n\f                                                                                                     Percentage of\r\n                                                                                                     Vulnerability in Total\r\n    Description                                  OWASP Top 10: 2021 Category                         Vulnerabilities Found\r\n    Information Disclosure",
    "chunk_order_index": 1,
    "full_doc_id": "doc-ac183a4652718b84dc5e6eb96aa27198"
  },
  "chunk-6a9aaef0f504a37b781ac813a9bb384c": {
    "tokens": 1200,
    "content": ". For example, Vulnerable Third-Party Libraries\r\nin Use, which was found in 18% of the pen tests, correlates with the 2021 OWASP Top 10 category A06:2021—Vulnerable and\r\nOutdated Components.\r\n\r\n\r\n\r\n                                                                                                                      | synopsys.com | 5\r\n\f                                                                                                     Percentage of\r\n                                                                                                     Vulnerability in Total\r\n    Description                                  OWASP Top 10: 2021 Category                         Vulnerabilities Found\r\n    Information Disclosure: Information          A01:2021—Broken Access Control                      19%\r\n    Leakage\r\n    Server Misconfiguration                      A05:2021—Security Misconfiguration                  18%\r\n    Insufficient Transport Layer Protection      A02:2021—Cryptographic Failures                     8%\r\n    Authorization: Insufficient Authorization    A07:2021—Identification and Authentication          7%\r\n                                                 Failures\r\n    Application Privacy Tests                    A07:2021—Identification and Authentication          6%\r\n                                                 Failures\r\n    Client-Side Attacks: Content Spoofing        A03:2021—Injection                                  5%\r\n    Fingerprinting                               A07:2021—Identification and Authentication          4%\r\n                                                 Failures\r\n    Authentication: Insufficient                 A07:2021—Identification and Authentication          4%\r\n    Authentication                               Failures\r\n    Application Misconfiguration                 A05:2021—Security Misconfiguration                  3%\r\n    Client-Side Attacks: Cross-Site Scripting    A03:2021—Injection                                  2%\r\n\r\n\r\n                            Table 3: Vulnerabilities Matched Against 2021 OWASP Top 10 Categories\r\n\r\n\r\nA01:2021—Broken Access Control\r\nNineteen percent of the total vulnerabilities were related to the OWASP A01:2021—Broken Access Control category, which moved\r\nfrom the fifth to first listing in the 2021 OWASP Top 10. The OWASP team noted more occurrences of vulnerabilities that fit into\r\nthis category in the applications tested than any other category. Notable CWEs included in this category are CWE-200: Exposure\r\nof Sensitive Information to an Unauthorized Actor, CWE-201: Exposure of Sensitive Information Through Sent Data, and CWE-\r\n352: Cross-Site Request Forgery.\r\n\r\n\r\n\r\n\r\n                                                Many of the vulnerabilities contained\r\n                                                in the Broken Access Control\r\n                                                category cannot be easily detected by\r\n                                                automated testing tools.\r\n\r\nIt’s worth noting that many of the vulnerabilities contained in the Broken Access Control category are more failures in business\r\nlogic than actual vulnerability types, and they cannot be easily detected by automated testing tools. For example, IDOR issues,\r\nwhich allow attackers to manipulate references in order to gain access to unauthorized data, are included in this group. As\r\nmentioned previously, the only effective way to detect IDOR issues is by having a human perform a manual test.\r\n\r\n\r\n\r\n        Of the total 28,501 vulnerabilities discovered in the tests,\r\n          21,810—76%—fell into an OWASP Top 10 category.\r\n\r\n\r\n                                                                                                                  | synopsys.com | 6\r\n\fA02:2021—Cryptographic Failures\r\nEight percent of the total vulnerabilities uncovered in the tests related to the second category in the new OWASP Top 10,\r\nA02:2021—Cryptographic Failures, previously known as Sensitive Data Exposure.\r\n\r\nThis renamed category has moved up one position, from third to second, in the 2021 OWASP Top 10. The OWASP team\r\ndescribes the category as “more of a broad symptom than a root cause,” as these vulnerabilities focus on failures related to\r\ncryptography, which can often lead to exposure of sensitive data. Notable CWEs included in this category are CWE-259: Use of\r\nHard-Coded Password, CWE-327: Broken or Risky Crypto Algorithm, and CWE-331: Insufficient Entropy.\r\n\r\n\r\n\r\n\r\n When combined in the OWASP A05:2021—\r\n     Security Misconfiguration category,\r\n  application and server misconfigurations\r\nrepresented 21% of the overall vulnerabilities.\r\n\r\n\r\nA03:2021—Injection\r\nThe A03:2021—Injection category, now third in the 2021 OWASP Top 10, includes well-known vulnerabilities such as CWE-79:\r\nCross-Site Scripting, CWE-89: SQL Injection, and CWE-73: External Control of File Name or Path. Seven percent of the total\r\nvulnerabilities found in the tests fell into this category.\r\n\r\nA05:2021—Security Misconfiguration\r\nWhen combined in the OWASP A05:2021—Security Misconfiguration category, application and server misconfigurations\r\nrepresented 21% of the overall vulnerabilities found in the tests. The OWASP team notes, “with more shifts into highly\r\nconfigurable software, it’s not surprising to see this category move up” from sixth to fifth position in the OWASP Top 10. Notable\r\nCWEs included in this category are CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference.\r\n\r\nA07:2021—Identification and Authentication Failures\r\nPreviously known as Broken Authentication, the A07:2021—Identification and Authentication Failures category slid to seventh\r\nposition in the OWASP Top 10 and now includes CWEs related to identification failures.\r\n\r\nTwenty-one percent of the total vulnerabilities found in the tests belonged to this category, including what is identified in the\r\ntests as “fingerprinting,” a security measure sometimes used to authenticate users. However, unless web servers are properly\r\nconfigured and monitored, fingerprinting can also provide attackers with valuable information such as OS type, OS version,\r\nSNMP information, domain names, network blocks, VPN points, and more.\r\n\r\n\r\nTypes of Tests\r\nSixty-seven percent of the tests performed were penetration             Test Type                             Percentage of\r\n                                                                                                              Total Tests\r\ntests—simulated attacks designed to",
    "chunk_order_index": 2,
    "full_doc_id": "doc-ac183a4652718b84dc5e6eb96aa27198"
  },
  "chunk-17330fdc0b4e4434b4139575c83b41b8": {
    "tokens": 1200,
    "content": "what is identified in the\r\ntests as “fingerprinting,” a security measure sometimes used to authenticate users. However, unless web servers are properly\r\nconfigured and monitored, fingerprinting can also provide attackers with valuable information such as OS type, OS version,\r\nSNMP information, domain names, network blocks, VPN points, and more.\r\n\r\n\r\nTypes of Tests\r\nSixty-seven percent of the tests performed were penetration             Test Type                             Percentage of\r\n                                                                                                              Total Tests\r\ntests—simulated attacks designed to evaluate the security of\r\nan application or system. Pen testing enables organizations             Pen Testing                           67%\r\nto find and fix runtime vulnerabilities in the final development        Dynamic Analysis                      16%\r\nstages of software or after its deployment. Pen tests are often         Mobile                                12%\r\na compliance requirement of security standards. For example,\r\n                                                                        Static Analysis                       2%\r\nthe Payment Card Industry Data Security Standard (PCI DSS)\r\n                                                                        Network Security                      2%\r\nrequires penetration testing on a regular schedule or after any\r\nsignificant changes to the software or system.                          Other                                 0.1%\r\n\r\n                                                                                   Table 4: Types of Tests Performed\r\n\r\n\r\n\r\n                                                                                                                     | synopsys.com | 7\r\n\fDynamic application security testing (DAST) and mobile application–specific tests comprised 16% and 12% of the total tests\r\nrespectively. DAST is used to identify common coding weaknesses such as vulnerability to SQL injection, cross-site scripting,\r\nsecurity misconfigurations, and other common issues detailed in the OWASP Top 10 and the CWE/SANS Top 25.\r\n\r\n\r\n\r\n\r\n                                                                       Synopsys DAST assessments\r\n                                                                         include manual testing to\r\n                                                                        uncover vulnerabilities that\r\n                                                                         typically can’t be found by\r\n                                                                            out-of-the-box tools.\r\n\r\nSynopsys DAST assessments include manual testing to uncover vulnerabilities that typically can’t be found by out-of-the-box\r\ntools, such as some vulnerabilities pertaining to authentication and session management, access control, and information\r\nleakage.\r\n\r\nMobile application security testing (MAST) is used to uncover authentication and authorization issues, client-side trust issues,\r\nmisconfigured security controls, cross-platform development framework issues, and vulnerabilities in application binaries\r\nrunning on the mobile device and corresponding server-side functionality.\r\n\r\n\r\n\r\n\r\n                                                                                                    Percentage of\r\n                                                                             Number of              Vulnerability in\r\n       Vulnerability                                                         Vulnerabilities        Total Pen Tests\r\n       Missing Content-Security-Policy Header                                952                    50%\r\n       Verbose Server Banner                                                 861                    45%\r\n       HTTP Strict Transport Security (HSTS) Not Implemented                 736                    39%\r\n       Weak SSL/TLS Configuration                                            725                    38%\r\n       Cacheable HTTPS Content                                               633                    33%\r\n       Reflected, Stored, or DOM-Based Cross-Site Scripting                  531                    28%\r\n       Weak Password Policy                                                  500                    26%\r\n       Insecure Content-Security-Policy Header                               466                    24%\r\n       Query String Parameter in HTTPS Request                               457                    24%\r\n       Clickjacking                                                          408                    21%\r\n       Excessive Session Timeout Duration                                    371                    19%\r\n       TLSv1.0 Supported                                                     355                    19%\r\n       Unrestricted File Upload                                              347                    18%\r\n       Vulnerable Third-Party Libraries in Use                               336                    18%\r\n       Verbose Error Messages (with Stack Trace)                             331                    17%\r\n\r\n\r\n\r\n                                          Table 5: Top Vulnerabilities Found in Pen Tests\r\n\r\n\r\n\r\n\r\n                                                                                                                   | synopsys.com | 8\r\n\f                                                                                               Percentage of\r\n                                                                        Number of              Vulnerability in Total\r\n    Vulnerability                                                       Vulnerabilities        DAST Tests\r\n    Missing Content-Security-Policy Header                              388                    63%\r\n    HTTP Strict Transport Security (HSTS) Not Implemented               307                    50%\r\n    Verbose Server Banner                                               305                    49%\r\n    Cacheable HTTPS Content                                             242                    39%\r\n    Excessive Session Timeout Duration                                  197                    32%\r\n    Clickjacking                                                        191                    31%\r\n    TLSv1.0 Supported                                                   179                    29%\r\n    Weak SSL/TLS Configuration                                          162                    26%\r\n    Reflected, Stored, or DOM-Based Cross-Site Scripting                162                    26%\r\n    Insecure Content-Security-Policy Header                             158                    26%\r\n    Weak Password Policy                                                157                    25%\r\n    Password Reset Username Enumeration                                 131                    21%\r\n    Secure Cookie Attribute Not Set                                     130                    21%\r\n    Unrestricted File Upload                                            127                    21%\r\n    Unmasked NPI Data                                                   123                    20%\r\n\r\n\r\n                                      Table 6: Top Vulnerabilities Found in DAST Tests\r\n\r\n\r\nTop Vulnerabilities Found in Mobile Tests Matched Against OWASP Risks\r\n\r\n\r\n                                                                                                Percentage of\r\n                                                                                                Vulnerability in\r\n    Vulnerability                                                OWASP Risk Category            Total Mobile Tests\r\n    Lack of Binary Obfuscation                                   M8: Code Tampering             30%\r\n    Application Allows Sensitive Data to Be Copied               M2: Insecure Data Storage      24%\r\n    Application Screenshot Information Disclosure                M4: Insecure Authentication    21%\r\n    Insecure configuration of Application Transport Security     M3: Insecure Communication     20%\r\n    (iOS)\r\n    Lack of Certificate Pinning                                  M3: Insecure Communication     19%\r\n    Sensitive Data Stored Unencrypted in Local Storage           M4: Insecure Authentication    18%\r\n    No Jailbreak Detection                                       M8: Code Tampering             16%\r\n    Sensitive Data Logged to System Logs                         A09:2021—Security Logging      15%\r\n                                                                 and Monitoring Failures\r\n    Weak SSL/TLS Configuration                                   M3: Insecure Communication     14%\r\n    Jailbreak Detection Bypass                                   M8: Code Tampering             14%\r\n    Verbose Server Banner",
    "chunk_order_index": 3,
    "full_doc_id": "doc-ac183a4652718b84dc5e6eb96aa27198"
  },
  "chunk-956e1a66c920d7d384ee0bad0655ecae": {
    "tokens": 1200,
    "content": "Sensitive Data Stored Unencrypted in Local Storage           M4: Insecure Authentication    18%\r\n    No Jailbreak Detection                                       M8: Code Tampering             16%\r\n    Sensitive Data Logged to System Logs                         A09:2021—Security Logging      15%\r\n                                                                 and Monitoring Failures\r\n    Weak SSL/TLS Configuration                                   M3: Insecure Communication     14%\r\n    Jailbreak Detection Bypass                                   M8: Code Tampering             14%\r\n    Verbose Server Banner                                        A05:2021—Security              14%\r\n                                                                 Misconfiguration\r\n    No Root Detection                                            M8: Code Tampering             13%\r\n\r\n\r\n                    Table 7: Top Vulnerabilities Found in Mobile Tests Matched Against OWASP Risks\r\n\r\n\r\n\r\n\r\n                                                                                                             | synopsys.com | 9\r\n\fAlthough not as well-publicized as its overall Top 10 list, OWASP also publishes a mobile risks list, last updated in 2016. Table 7\r\nmatches the mobile test findings against the OWASP Top 10 Mobile Risks list of 2016. Two of the vulnerability categories listed\r\nare server-side issues, and they are shown with the comparable 2021 OWASP Top 10 list categories.\r\n\r\n\r\n                        Insecure Data Storage\r\n                        Twenty-four percent of the discovered vulnerabilities in the mobile tests were related to OWASP M2:\r\n                        Insecure Data Storage. These vulnerabilities could allow an attacker to gain access to a mobile device\r\n                        either physically (i.e., accessing a stolen device) or through malware.\r\n\r\n\r\n                        Insecure Communications\r\n\r\n                        Fifty-three percent of the mobile tests uncovered vulnerabilities associated with insecure\r\n                        communications. General best practices include using certificates signed by a trusted provider and\r\n                        ensuring that application transport security is enabled for iOS devices.\r\n\r\n\r\n                        Code Tampering\r\n 0110001101101111\r\n 0110010001100101       A lack of binary protection can result in a mobile app that can be quickly analyzed, reverse-engineered,\r\n 0010000001110100\r\n 0110000101101101       and modified by an adversary. This vulnerability was found in 30% of the mobile tests. Other\r\n 0111000001100101\r\n 0111001001101001       vulnerabilities falling into this category include No Jailbreak Detection, Jailbreak Detection Bypass, and\r\n 0110111001100111       No Root Detection.\r\n\r\n                        Server Security Misconfigurations and Security Logging and Monitoring Failures\r\n                        Verbose server banners—found in 14% of the mobile tests—provide information such as server name,\r\n                        type, and version number; this information could allow attackers to perform targeted attacks on specific\r\n                        technology stacks. The Security Logging and Monitoring Failures category encompasses insufficient\r\n                        logging, detection, and monitoring. Issues related to this category were found in 15% of the tests.\r\n\r\n\r\n\r\nConclusion and Key Takeaways\r\n\r\n                                                                                                     Percentage of\r\n                                                                           Number of                 Vulnerability in Total\r\n     Vulnerability                                                         Vulnerabilities           Test Targets\r\n     Missing Content-Security-Policy Header                                1,347                     52%\r\n     Verbose Server Banner                                                 1,263                     49%\r\n     HTTP Strict Transport Security (HSTS) Not Implemented                 1,108                     43%\r\n     Weak SSL/TLS Configuration                                            1,002                     39%\r\n     Cacheable HTTPS Content                                               918                       36%\r\n     Reflected, Stored, or DOM-Based Cross-Site Scripting                  723                       28%\r\n     Weak Password Policy                                                  717                       28%\r\n     Insecure Content-Security-Policy Header                               632                       25%\r\n     Query String Parameter in HTTPS Request                               610                       24%\r\n     Clickjacking                                                          608                       24%\r\n\r\n\r\n                                               Table 8: Top 10 Vulnerabilities Found\r\n\r\n\r\n\r\n\r\n                                                                                                                  | synopsys.com | 10\r\n\fTesting with a Full Spectrum of Security Tools\r\nAs noted earlier in this report, many organizations use third-party application security testing services to validate their own\r\ntesting, ensure that their internal security controls are working, comply with regulatory or business requirements that mandate a\r\nthird-party assessment, or extend their own software security activities without having to add more staff or new tools.\r\n\r\nThe findings detailed in Table 8 indicate that the majority of development teams had probably conducted their own transparent\r\nbox security testing—such as static analysis—earlier in the software development life cycle and addressed many vulnerabilities\r\nbefore having Synopsys examine the running applications/systems with dynamic analysis, mobile, and penetration tests. It’s\r\nalso clear from the results that the best approach to security testing is to use a spectrum of the tools available to help ensure an\r\napplication or system is secure.\r\n\r\nFor example, 28% of total test targets had some exposure to a cross-site scripting attack, one of the most prevalent and\r\ndestructive high-/critical-risk vulnerabilities impacting web applications. While SAST testing can detect many common\r\nvulnerabilities, it is limited to discovering vulnerabilities that occur in the code itself. Many XSS vulnerabilities occur only when the\r\napplication is running.\r\n\r\nEven Lower-Risk Vulnerabilities Can Be Exploited to Facilitate Attacks\r\nSixty-four percent of the vulnerabilities the tests discovered are considered minimal-, low-, or medium-risk. That is, the issues\r\nfound are not directly exploitable by attackers to gain access to systems or sensitive data. Nonetheless, surfacing these\r\nvulnerabilities is not an empty exercise, as even lower-risk vulnerabilities can be exploited to facilitate attacks. For example,\r\nverbose server banners—found in 49% of the tests—provide information such as server name, type, and version number that\r\ncould allow attackers to perform targeted attacks on specific technology stacks.\r\n\r\n\r\n\r\n                                                The prevalence of cross-site scripting,\r\n                                                clickjacking, and cross-site leak exploits\r\n                                                 makes a strong argument for having a secure\r\n                                                  content security policy",
    "chunk_order_index": 4,
    "full_doc_id": "doc-ac183a4652718b84dc5e6eb96aa27198"
  },
  "chunk-b8b9a26955fe1e49e0e223df0e66686f": {
    "tokens": 1200,
    "content": "acing these\r\nvulnerabilities is not an empty exercise, as even lower-risk vulnerabilities can be exploited to facilitate attacks. For example,\r\nverbose server banners—found in 49% of the tests—provide information such as server name, type, and version number that\r\ncould allow attackers to perform targeted attacks on specific technology stacks.\r\n\r\n\r\n\r\n                                                The prevalence of cross-site scripting,\r\n                                                clickjacking, and cross-site leak exploits\r\n                                                 makes a strong argument for having a secure\r\n                                                  content security policy to protect against\r\n                                                   various types of attacks, especially cross-\r\n                                                    site scripting.\r\n\r\nImplementing or securing protections such as a content security policy (CSP) can provide an added layer of security that helps\r\ndetect and mitigate certain types of attacks, including cross-site scripting and data injection attacks. An insecure or absent\r\nCSP—which was found (or, more accurately, not found) in 77% of the tests—may be considered a low-risk concern. However, the\r\nprevalence of cross-site scripting, clickjacking, and cross-site leak exploits makes a strong argument for having a secure CSP as\r\nan effective second layer of protection against various types of attacks, especially cross-site scripting.\r\n\r\nAn Urgent Need for a Software Bill of Materials\r\nAs shown in Tables 5 and 6, the pen and dynamic analysis tests found essentially the same types of vulnerabilities, with some\r\nvariation in percentages found. However, of note is the number of Vulnerable Third-Party Libraries in Use, found in 18% of the\r\npen tests. Although not detailed in this report, the same vulnerability was found in 33% of the static analysis tests Synopsys\r\napplication testing services conducted in 2020.\r\n\r\n\r\n\r\n\r\n                                    Highlight from Table 5: Top Vulnerabilities Found in Pen Tests\r\n\r\n\r\n\r\n                                                                                                                      | synopsys.com | 11\r\n\fThe vulnerability description correlates with the 2021 OWASP Top 10 category A06:2021—Vulnerable and Outdated Components.\r\nAs OWASP notes, your software is likely vulnerable if\r\n\r\n• You do not know the versions of all components you use (both client-side and server-side). This includes components you\r\n  directly use as well as nested dependencies.\r\n• The code being used is unsupported or out-of-date. This includes the OS, web/application server, database management\r\n  system, applications, APIs, and all components, runtime environments, and libraries.\r\n\r\nAs the old security saw goes, “you can’t fix problems you don’t know you have.” Most organizations typically use a mix of custom-\r\nbuilt code, commercial off-the-shelf code, and open source components to create the software they sell or use internally. Often\r\nthose organizations have informal—or no—inventories detailing exactly what components their software is using, as well as\r\nthose components’ licenses, versions, and patch status. With many companies having hundreds of applications or software\r\nsystems in use, each themselves likely having hundreds to thousands of different third-party and open source components, an\r\naccurate, up-to-date software Bill of Materials (SBOM) is urgently needed to effectively track those components.\r\n\r\nThe concept of SBOM comes from manufacturing, where the classic BOM is an inventory detailing the items included in a\r\nproduct. When a defective part is discovered, the manufacturer knows precisely what product is affected and can begin the\r\nprocess of repair or replacement.\r\n\r\n\r\n\r\n\r\n                                            BSIMM12 data indicates a 61%\r\n                                            increase in the “identify open source”\r\n           61%                              activity over the past two years, due\r\n            increase                        to the prevalence of open source\r\n                                            components in modern software.\r\n\r\nSimilarly, more and more organizations are working to maintain an accurate, up-to-date SBOM that includes an inventory of\r\nthird-party and open source components to ensure their code is high-quality, compliant, and secure. For example, BSIMM12\r\ndata indicates a 61% increase in the “identify open source” activity over the past two years, due to the prevalence of open source\r\ncomponents in modern software and the rise of attacks using popular open projects as vectors.\r\n\r\nAnd the demand for SBOMs continues to grow. In its 2020 Magic Quadrant for Application Security Testing, Gartner predicted,\r\n“By 2024, the provision of a detailed, regularly updated software Bill of Materials by software vendors will be a non-negotiable\r\nrequirement for at least half of enterprise software buyers, up from less than 5% in 2019.”\r\n\r\nAnd while the 2021 executive order on Improving the Nation’s Cybersecurity is primarily directed at federal departments,\r\nagencies, and contractors, its requirement for third parties to provide government software purchasers with a comprehensive\r\nSBOM will likely have a broad impact across critical infrastructure sectors and related technology suppliers.\r\n\r\n\r\nAbout CyRC Research\r\nThe mission of the Synopsys Cybersecurity Research Center (CyRC) is to publish security research\r\nthat helps organizations better develop and consume secure, high-quality software. Our recent\r\nsecurity and software quality reports include the “Open Source Security and Risk Analysis” (OSSRA)\r\nreport, and “Peril in a Pandemic: The State of Mobile Application Security.”\r\n\r\n\r\n\r\n\r\n                                                                                                            CyRC\r\n                                                                                                                 | synopsys.com | 12\r\n\fThe Synopsys difference\r\n\r\n\r\nSynopsys provides integrated solutions that transform the way you build and deliver software,\r\naccelerating innovation while addressing business risk. Our unmatched expertise helps you\r\nplan and execute any security initiative. We offer the most comprehensive product portfolio in\r\nthe market, and it interoperates with third-party and open source tools. This open, pragmatic\r\napproach empowers your organization to leverage existing investments in testing tools to\r\nbuild the security program that best meets your needs. With Synopsys, your developers can\r\nsecure code as fast as they write it. Your development and DevSecOps teams can automate\r\ntesting within development pipelines without compromising velocity",
    "chunk_order_index": 5,
    "full_doc_id": "doc-ac183a4652718b84dc5e6eb96aa27198"
  },
  "chunk-2573aa298d4a6c78c25da420a813fce3": {
    "tokens": 296,
    "content": "unmatched expertise helps you\r\nplan and execute any security initiative. We offer the most comprehensive product portfolio in\r\nthe market, and it interoperates with third-party and open source tools. This open, pragmatic\r\napproach empowers your organization to leverage existing investments in testing tools to\r\nbuild the security program that best meets your needs. With Synopsys, your developers can\r\nsecure code as fast as they write it. Your development and DevSecOps teams can automate\r\ntesting within development pipelines without compromising velocity. And your security teams\r\ncan proactively manage risk and focus remediation efforts on what matters most to your\r\norganization. Only Synopsys offers everything you need to build trust in your software.\r\n\r\n\r\nFor more information, go to www.synopsys.com/software.\r\n\r\nSynopsys, Inc.\r\n690 E Middlefield Road\r\nMountain View, CA 94043 USA\r\n\r\nContact us:\r\nU.S. Sales: 800.873.8193\r\nInternational Sales: +1 415.321.5237\r\nEmail: sig-info@synopsys.com\r\n\r\n\r\n\r\n\r\n©2021 Synopsys, Inc. All rights reserved. Synopsys is a trademark of Synopsys, Inc. in the United States and other countries. A list of Synopsys trademarks is available at\r\nwww.synopsys.com/copyright.html . All other names mentioned herein are trademarks or registered trademarks of their respective owners. December 2021\r\n\r\n\r\n\r\n\r\n                                                                                                                                                      | synopsys.com | 13",
    "chunk_order_index": 6,
    "full_doc_id": "doc-ac183a4652718b84dc5e6eb96aa27198"
  }
}